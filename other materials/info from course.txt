Advanced Command Liner for more tables:
    https://www.danvega.dev/blog/2017/04/07/spring-boot-command-line-runner/
    https://www.amitph.com/spring-boot-runners/

Contul din sesiunea de logare:
    https://stackoverflow.com/questions/45908100/get-username-in-session-spring-security
    https://stackoverflow.com/questions/63888901/how-securitycontextholder-getcontext-getauthentication-works

Pentru formularul de login:
    https://webdesignerwall.com/wdw-snippet/login-form-sign-in-form-bootstrap-4-login-card

DE MARE AJUTOR:
I:\Code Here\1. Licenta\IntelliJ\tutorials-master\spring-boot-modules\spring-boot-crud


I. Curs AmigosCode "Get started with SpringBoot":
https://amigoscode.com/courses/267273/lectures/29454614

II. Curs AmigosCode "Spring Security":
https://amigoscode.com/courses/728126/lectures/13124043

III. Curs Angular Udemy:
https://www.udemy.com/course/the-complete-guide-to-angular-2/learn/lecture/14466410?start=0#overview
jitarciuc_antonio@yahoo.com
Locomondo0822!

IV: Exemplu foarte bun de REQUESTURI
https://spring.io/guides/tutorials/rest/

implementeaza ca in URL sa fie specificat rolul userului care il acceseaza:
    -intial totul se logheaza pe pagina principala
        adica "api/home", unde va exista un buton numit "api/login"

    -iar in functie de rol
        va continua la "api/student/students/<index>" si "api/admin/students/all"

    -rol STUDENT:
        vom folosi "StudentController" : "api/v1/students" => "api/student/students"
        va putea accesa o pagina personalizata cu datele studentului si daca a fost admis sau nu la camin
        ne va duce la pagina "api/student/students/<index>"
        index fiind indexul din DB

    -rol ADMIN:
        vom folosi "StudentManagementController" : "management/api/v1/students" => "api/admin/students"
        va putea accesa o pagina cu un tabel gigantic ce contine toti studentii ordonati dupa anumite reguli
        vor fi vreo N tabele in functie de cate N camine exista in ETTI : "api/admin/students/all"
        iar daca se da click pe un student ne va duce la url-ul "api/admin/students/all/<index>"
        index fiind indexul din DB

Info from course I. ----------------------------------------------------------------------------------------------------

---------------- Request Info ----------------

GET = afisezi informatii
POST = preiei informatii
PUT = update
DELETE = sterge informatii

---------------- FLOW ----------------

request -> controller -> service -> repository
    controller : mapping the url
    service : backend method
    repository: interfata pt metode de call in database

StudentConfig:
    -aici se umple tabelul cu valori
    -configuram basically baza de date

Student:
    -clasa model
    -dupa field-urile ei se mapeaza tabelul student din baza de date student

---------------- Anotatii ----------------

@RestController	- transforma clasa in controller, adica pe acolo trec requesturile 

service layer : business logic 

@Component : declaram un bean ca sa putem da autowired cand instantiam un obiect al acelei clase 
dar noi mergem mai departe si o facem sa fie specifica @Service 


---------------- Database ----------------

Configuratia pt conectarea la database:
	spring.datasource.url=jdbc:postgresql://localhost:5432/students
	spring.datasource.username=
	spring.datasource.password=
	spring.jpa.hibernate.ddl-auto=create-drop
	spring.jpa.show-sql=true
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
	spring.jpa.properties.hibernate.format_sql=true
	
	PostgreSQL path: C:\Program Files\PostgreSQL\13
		pass: 1233
		port: 5432
		
	Comenzi pt bash cand te joci cu postgreSQL:
	1. psql -U postgres : sa te loghezi pe userul postgres cu parola 1233
	2. \l : afiseaza toate bazele de date 
	3. \du: afiseaza toti userii 
	4. \c student: te conectezi la baza de date "student"
	5. \d student: afiseaza toate coloanele cu tipurile de date
	6. SELECT * FROM student; : afiseaza tot tabelul
	
---------------- Repository pt Student ----------------

public interface StudentRepository extends JpaRepository<Student, Long> : 
	-deci primul e template object: Student : este tipul de date (definit ca o clasa) cu care vrem repositoryul sa lucreze 
	-al doilea e IDul de stocare declarat ca field

@Query("select s from Student s where s.nume = ?1")
    -Student este clasa noastra model, care e anotata ca fiind Entity, asta inseamna ca ea e folosita pt crearea tabelului din database
    -prin urmare s e o instanta a clasei Student si putem accesa orice field din ea

---------------- @TRANSIENT ----------------

https://amigoscode.com/courses/267273/lectures/29454627
se foloseste pt campuri din clasa ta care nu vrei sa apara in baza de date pentru ca pot fi calculate automat si doar afisate

---------------- PUT - UPDATE ----------------

videoul cu <Exercise Solution> arata niste validari

---------------- Executabil JAR al proiectului ----------------

http://localhost:8080/api/v1/students

Maven->clean, then Maven->install
si Project Files apare target folder
in terminal:
    cd target
    java -jar accessing... .jar
    java -jar accessing... .jar --server.port=8081 (daca vrei sa rulezi pe alt port)

Jar-ul se poate dockeriza, se poate deploy to a server so have fun

---------------- Difference between <junit-vintage-engine> and <junit-jupiter-engine> ----------------

junit-vintage-engine :

    Used in Junit-4 Testing.
    Used to call core classes and annotations.
    'Assert' which provide assertion methods for performing test.
    'Assume' used to place assumptions.
    Use annotation like, @Ignore, @Before, etc...

junit-jupiter-engine :

    Used in Junit-5 Testing
    Provide some API which helpful to write test cases.
    'Assertions' provides utility methods of assertion condition for testing.
    'Assumptions' - utility method provide condition based on assumption.
    Change the bit of annotation name like, @Disable, @BeforeAll, @BeforeEach, etc...

Info from course II. ---------------------------------------------------------------------------------------------------

in clasa ApplicationSecurityConfig vom configura tot ce este legat de autentificare

Daca vrei sa whitelistezi url-uri INAINTE de a te autentifica:
    -se scriu ca antMatchers(...)
    -cum am facut intre simbolul serpisor

protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()    //vrem sa autorizam requesturi
                .antMatchers("/", "index", "/css/*", "/js/*")
                .permitAll()
                                ~~~~~~~~~~~~~~~ .antMatchers("/api/v1/students") ~~~~~~~~~~~~~~~
                                ~~~~~~~~~~~~~~~ .permitAll() ~~~~~~~~~~~~~~~
                .anyRequest()           //orice request venit
                .authenticated()        //trebuie OBLIGATORIU sa fie autentificat
                .and()                  //si
                .httpBasic();           //mecanismul prin care verificam clientul care se logheaza cu userul sau cv pe aici
    }

-------------------- USER CREATI MANUAL --------------------

asa se adauga userii pe care vreau sa ii creez eu manual, carora le dau roluri, username, parola etc
acel return new InMem returneaza o LISTA de UserDetails, adica o lista de useri

protected UserDetailsService userDetailsService() {
         UserDetails checuUser = User.builder()
                .username("checu")
                .password("1233")
                .roles("STUDENT")           //ROLE_STUDENT
                .build();

        return new InMemoryUserDetailsManager(
                checuUser
        );
    }

-TOTUSI nu e suficient atat, e nevoie de un PasswordEncoder
-Astfel vom folosi BCRYPT Encoder
    https://www.baeldung.com/spring-security-registration-password-encoding-bcrypt

-------------------- Guava Library --------------------

https://guava.dev/releases/28.1-jre/api/docs/index.html?overview-summary.html

-------------------- Roles and Permissions --------------------

Am creat 2 roluri STUDENT si ADMIN declarate intr-un enum si 4 permisiuni declarate in alt enum.

Cele 2 roluri primesc anumite permisiuni
    ADMIN - toate 4
    STUDENT - 3, fara course:write

-------------------- URL accesat de un user cu un anumit rol --------------------

Daca vrem sa spunem ce url poate accesa un user, e nevoie sa ii impunem ca are un anumit rol:
    .antMatchers("/api/**").hasRole(STUDENT.name())

Pe viitor ne intereseaza ca ADMINul sa poata accesa orice, iar STUDENTul sa poata accesa numai informatiile despre el
In contextul licentei, inseamna ca studentii sa poata vedea daca au intrat sau nu in camin.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ai ramas la Permission Based Authentication
https://amigoscode.com/courses/728126/lectures/13124113

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Revenind, pana acum am implementat:
    -form auth unde doar bagai user si pass generat de SpringSecurity in consola
    -apoi am adaugat 2 useri pt form auth
    -apoi am implementat role-based auth unde in functie de rol, poti vedea ceva

-vom implementa un al 3lea rol, ASSISTANT sau TRAINEE care poate vedea ce vede si adminul, dar nu poate modifica

-------------------- CSRF --------------------

.csrf().disable()
    -daca nu adaugam treaba asta, nu puteam testa requesturile pe management

CSRF = crooss site request forgery = the action of forging a copy or imitation of a document, signature, banknote or work of art

-------------------- PreAuthorize --------------------
   /*
    @PreAuthorize primeste un string ca argument de felul:
        "hasRole('ROLE_')"
        "hasAnyRole('ROLE_')"
        "hasAuthority('permission')"
        "hasAnyAuthority('permission')"
     */

//~~~~~~~~~~~~~~ Am folosit un PreAuthorize si pt asta ~~~~~~~~~~~~~~
                //Orice url care are ca path /api/** -> are rolul de student
                //.antMatchers("/api/**").hasRole(STUDENT.name())

                /*
//~~~~~~~~~~~~~~ also AM FOLOSIT ANOTATIILE PREAUTHORIZE ca sa inlocuim acele 4 antMatchere ~~~~~~~~~~~~~~
                //Orice url care are ca path /management/api/** -> poate face DEL, POST, PUT daca are oricare rol cu autoritatea de COURSE_WRITE => adica doar ADMIN
                .antMatchers(HttpMethod.DELETE,"management/api/**").hasAuthority(COURSE_WRITE.getPermission())
                .antMatchers(HttpMethod.POST,"management/api/**").hasAuthority(COURSE_WRITE.getPermission())
                .antMatchers(HttpMethod.PUT,"management/api/**").hasAuthority(COURSE_WRITE.getPermission())

                //Orice url care are ca path /management/api/** ->
                .antMatchers(HttpMethod.GET,"management/api/**").hasAnyRole(ADMIN.name(), ASSISTANT.name())
                 */

-------------------- Replaced Roles cu Authorities --------------------

UserDetails userUser = User.builder()
                .username("checu")
                .password(passwordEncoder.encode("1233"))
                //.roles(STUDENT.name())           //ROLE_STUDENT
                 .authorities(STUDENT.getGrantedAuthorities())
                .build();

-------------------- Remember me Option --------------------

.rememberMe().tokenValiditySeconds() => modificam timpul default de 2 sapt
.rememberMe().tokenRepository() => in cazul in care avem o baza de date pt a stoca sessionID sau remember-me cookie